generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  name         String
  createdAt    DateTime       @default(now())
  password     String
  role         UserRole       @default(USER)
  quizAttempts QuizAttempt[]
  progress     UserProgress[]
}

model Lesson {
  id       Int            @id @default(autoincrement())
  title    String
  content  String
  quizzes  Quiz[]
  progress UserProgress[]
}

model Quiz {
  id        Int            @id @default(autoincrement())
  lessonId  Int
  title     String
  lesson    Lesson         @relation(fields: [lessonId], references: [id])
  attempts  QuizAttempt[]
  questions QuizQuestion[]
}

model QuizQuestion {
  id             Int                 @id @default(autoincrement())
  quizId         Int
  question       String
  correctAnswer  String?
  points         Int                 @default(1)
  type           QuestionType        @default(MULTIPLE_CHOICE)
  answers        QuizAnswer[]
  attemptAnswers QuizAttemptAnswer[]
  quiz           Quiz                @relation(fields: [quizId], references: [id])
}

model QuizAnswer {
  id         Int          @id @default(autoincrement())
  questionId Int
  answer     String
  isCorrect  Boolean
  letter     String?
  question   QuizQuestion @relation(fields: [questionId], references: [id])
}

model UserProgress {
  id        Int     @id @default(autoincrement())
  userId    Int
  lessonId  Int
  completed Boolean @default(false)
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
  user      User    @relation(fields: [userId], references: [id])

  @@unique([userId, lessonId])
}

model QuizAttempt {
  id          Int                 @id @default(autoincrement())
  userId      Int
  quizId      Int
  score       Int                 @default(0)
  maxScore    Int
  completed   Boolean             @default(false)
  startedAt   DateTime            @default(now())
  completedAt DateTime?
  quiz        Quiz                @relation(fields: [quizId], references: [id])
  user        User                @relation(fields: [userId], references: [id])
  answers     QuizAttemptAnswer[]
}

model QuizAttemptAnswer {
  id           Int          @id @default(autoincrement())
  attemptId    Int
  questionId   Int
  userAnswer   String
  isCorrect    Boolean
  pointsEarned Int          @default(0)
  attempt      QuizAttempt  @relation(fields: [attemptId], references: [id])
  question     QuizQuestion @relation(fields: [questionId], references: [id])
}

enum UserRole {
  USER
  ADMIN
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_BLANK
  SHORT_ANSWER
}
